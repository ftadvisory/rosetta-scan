cdm.base.datetime,func TimeZoneFromBusinessCenterTime,<Function to resolve a time passed as BusinessCenterTime into a TimeZone time.>
cdm.base.datetime,func ResolveAdjustableDate,
cdm.base.datetime,func ResolveAdjustableDates,
cdm.base.datetime,func ToDateTime,
cdm.base.datetime,func ConvertToAdjustableOrRelativeDate,<Utility function to convert from AdjustableOrAdjustedOrRelativeDate to AdjustableOrRelativeDate>
cdm.base.datetime,func ConvertToAdjustableOrAdjustedOrRelativeDate,<Utility function to convert from AdjustableOrAdjustedOrRelativeDate to AdjustableOrAdjustedOrRelativeDate>
cdm.base.datetime,func Now,<Current date time.>
cdm.base.datetime,func Today,<Current date.>
cdm.base.datetime,func GetAllBusinessCenters,<Returns a merged list of BusinessCenterEnums for the supplied BusinessCenters.>
cdm.base.datetime,func BusinessCenterHolidaysMultiple,<Returns a merged list of holidays for the supplied business centers.>
cdm.base.datetime,func BusinessCenterHolidays,
cdm.base.datetime,func DayOfWeek,<Returns the day of week corresponding to the supplied date.>
cdm.base.datetime,func AddDays,<Adds the specified number of calendar days to the supplied date.  A negative number will generate a date before the supplied date.>
cdm.base.datetime,func DateDifference,<Subtracts the two supplied dates to return the number of calendar days between them.  A negative number implies first is after second.>
cdm.base.datetime,func LeapYearDateDifference,<Subtracts the two supplied dates to return the number of leap year calendar days between them. A negative number implies firstDate is after secondDate.>
cdm.base.datetime,func AppendDateToList,<Add a date to a list of dates.>
cdm.base.datetime,func PopOffDateList,<Remove last element from a list of dates.>
cdm.base.datetime,func IsWeekend,"<returns whether the supplied date is a weekend. This assumes a 5 day week with Saturday and Sunday as holidays. A more sophisticated implementation might use the business centers to determine which days are weekends, but most jurisdictions where derivatives are traded follow this convention.>"
cdm.base.datetime,func IsHoliday,<Returns whether a day is a holiday for the specified business centers>
cdm.base.datetime,func IsBusinessDay,"<returns an indicator of whether the supplied date is a good business date given the supplied business centers. True => good date, i.e. not a weekend or holiday. False means that it is either a weekend or a holiday>"
cdm.base.datetime,func AddBusinessDays,"<Returns a good business date that has been offset by the given number of business days given the supplied business centers. A negative value implies an earlier date (before the supplied originalDate), and a positive value a later date (after the supplied date).>"
cdm.base.datetime,func GenerateDateList,"<Creates a list of good business days starting from the startDate and going to the end date, inclusive, omitting any days that are weekends or holidays according to the supplied business centers.>"
cdm.event.position,func FxMarkToMarket,<Representation of sample mark to market calculation provided by a member firm.>
cdm.event.position,func InterpolateForwardRate,
cdm.event.position,func EvaluatePortfolioState,<Function specification to evaluate a portfolio's aggregation parameters and return a new portfolio state containing aggregated positions.>
cdm.event.position,func IsValidPartyRole,
cdm.observable.common,func ResolveTimeZoneFromTimeType,<Defines inputs and outputs needed to derive the time and time-zone for a product identifier>
cdm.observable.common,func CashPriceQuantityNoOfUnitsTriangulation,"<Data rule to check the relationship between cash price, notional and number of units.>"
cdm.product.asset.floatingrate,func DetermineFloatingRateReset,"<Get the value of a floating rate by either observing it directly or performing a rate calculation.  This function works differently depending on the rate category and style, as described in the 2021 ISDA Definitions, Section 6.6.>"
cdm.product.asset.floatingrate,func GetFloatingRateProcessingType,"<Get a classification of  the floating rate is processed. This is based on FRO category, style, and calculation method, as described in the 2021 ISDA Definitions Section 6.6.  The categorization information is obtained from the FRO metadata. .>"
cdm.product.asset.floatingrate,func ProcessFloatingRateReset,"<Entry point for the function that performs the floating rate resetting operation.  There are different variations depending on the processing type (e.g. screen rate, OIS, modular calculated rate. .>"
cdm.product.asset.floatingrate,func ProcessFloatingRateReset(processingType,FloatingRateIndexProcessingTypeEnum -> Screen)
cdm.product.asset.floatingrate,func ProcessFloatingRateReset(processingType,FloatingRateIndexProcessingTypeEnum -> Modular)
cdm.product.asset.floatingrate,func ProcessFloatingRateReset(processingType,FloatingRateIndexProcessingTypeEnum -> OIS)
cdm.product.asset.floatingrate,func ProcessFloatingRateReset(processingType,FloatingRateIndexProcessingTypeEnum -> OvernightAvg)
cdm.product.asset.floatingrate,func GetCalculatedFROCalculationParameters,<Initialize a calculation parameters block for an OIS or a daily average rate. Used to support FROs that include an embedded calculation.>
cdm.product.asset.floatingrate,func ProcessFloatingRateReset(processingType,FloatingRateIndexProcessingTypeEnum -> CompoundIndex)
cdm.product.asset.floatingrate,func EvaluateScreenRate,<Evaluate/lookup the value of a screen rate.>
cdm.product.asset.floatingrate,func DetermineResetDate,<Determine the value of the reset date given a reset dates structure and a calculation paeriod for which it's needed. Reset dates are defined in the 2021 ISDA Definition in Section 6.5.5.>
cdm.product.asset.floatingrate,func DetermineFixingDate,<Determine the observation (fixing) date needed given a reset dates structure and a reset date.>
cdm.product.asset.floatingrate,func GetFloatingRateProcessingParameters,<Determine the processing parameters to use from the InterestRatePayout by looking them up if necessary from the corresponding schedules in the interest rate stream.>
cdm.product.asset.floatingrate,func SpreadAmount,<Look up the spread amount for a calculation period.>
cdm.product.asset.floatingrate,func MultiplierAmount,<Look up the multiplier amount for a calculation period.>
cdm.product.asset.floatingrate,func CapRateAmount,<Look up the cap rate amount for a calculation period.>
cdm.product.asset.floatingrate,func FloorRateAmount,<Look up the floor rate amount for a calculation period.>
cdm.product.asset.floatingrate,func GetRateScheduleAmount,<Get the rate for the period start date.>
cdm.product.asset.floatingrate,func GetRateScheduleStepValues,<Get all rate schedule step values whose stepDate is before or equal to the supplied periodStartDate.  Returns a list of step values starting from the initial rate.>
cdm.product.asset.floatingrate,func ApplyFloatingRateProcessing,"<Perform rate treatments on floating rates, such as applying spreads, multipliers, caps and floors, rounding, and negative interest treatment. TODO"
cdm.product.asset.floatingrate,func ApplyFloatingRatePostSpreadProcessing,"<Perform post-spread rate treatments on floating rates, such as applying caps and floors, rounding, and negative interest treatment.  TODOO"
cdm.product.asset.floatingrate,func ApplyCapsAndFloors,"<Apply any cap or floor rate as a constraint on a regular swap rate, as discussed in the 2021 ISDA Definitions, section 6.5.8 and 6.5.9.>"
cdm.product.asset.floatingrate,func ApplyUSRateTreatment,"<Apply the US rate treatment logic where applicable (Bond Equivalent Yield, Money Market Yield, as described in the 2021 ISDA Definitions, section 6.9.>"
cdm.product.asset.floatingrate,func ApplyFinalRateRounding,"<Apply the final rate rounding treatment logic as described in the 2021 ISDA Definitions, section 4.8.1.>"
cdm.observable.asset.calculatedrate,func EvaluateCalculatedRate,<Evaluate a calculated rate as described in the 2021 ISDA Definitions.>
cdm.observable.asset.calculatedrate,func GenerateObservationDatesAndWeights,<Apply shifts to generate the list of observation dates and weights for each of those date.>
cdm.observable.asset.calculatedrate,func ComputeCalculationPeriod,"<Determine the calculation period to use for computing the calculated rate (it may not be the same as the normal calculation period, for instance if the rate is set in advance.>"
cdm.observable.asset.calculatedrate,func ComputeCalculationPeriod(calculateRelativeTo ObservationPeriodDatesEnum -> SetInAdvance):,
cdm.observable.asset.calculatedrate,func ComputeCalculationPeriod(calculateRelativeTo ObservationPeriodDatesEnum -> Standard):,
cdm.observable.asset.calculatedrate,func ComputeCalculationPeriod(calculateRelativeTo ObservationPeriodDatesEnum -> FixingDate):,
cdm.observable.asset.calculatedrate,func DetermineObservationPeriod,"<Determine any applicable offsets/shifts for the period for observing an index, and then generate the date range to be used for observing the index, based on the calculation period, plus any applicable offsets/shift.>"
cdm.observable.asset.calculatedrate,func GenerateObservationPeriod,"<Generate the date range to be used for observing the index, based on the calculation period, plus any applicable offsets/shifts.>"
cdm.observable.asset.calculatedrate,func GenerateObservationDates,<Generate the list of observation dates given an observation period.>
cdm.observable.asset.calculatedrate,func GenerateWeightings,<Determine the weighting dates and the corresponding weights to be used for weighting observation.>
cdm.observable.asset.calculatedrate,func DetermineWeightingDates,<Determine the dates to be used for weighting observation.>
cdm.observable.asset.calculatedrate,func ProcessObservations,"<Apply daily observation parameters to rate observation.  These are discussed in the 2021 ISDA Definitions, section 7.2.3 and 7.2.4.>"
cdm.observable.asset.calculatedrate,func GenerateWeights,<Recursively creates a list of weights based on the date difference between successive days.>
cdm.observable.asset.calculatedrate,func ApplyCompoundingFormula,<Implements the compounding formula
cdm.observable.asset.calculatedrate,func ApplyAveragingFormula,<Implements the weighted arithmetic averaging formula.  Sums the weighted rates and divides by the total weight.  This is used to support section 7.4 of the 2021 ISDA Definitions.>
cdm.product.common.schedule,func PaymentDate,
cdm.product.common.schedule,func PeriodsInYear,
cdm.product.common.schedule,func CalculationPeriod,"<2006 ISDA Definition Section 4.13. 'Calculation Period' means, in respect of a Swap Transaction and a party, each period from, and including, one Period End Date of that party to, but excluding, the next following applicable Period End Date during the Term of the Swap Transaction, except that (a) the initial Calculation Period for the party will commence on, and include, the Effective Date and (b) the final Calculation Period for the party will end on, but exclude, the Termination Date.>"
cdm.product.common.schedule,func CalculationPeriods,"<2006 ISDA Definition Section 4.13. 'Calculation Period' means, in respect of a Swap Transaction and a party, each period from, and including, one Period End Date of that party to, but excluding, the next following applicable Period End Date during the Term of the Swap Transaction, except that (a) the initial Calculation Period for the party will commence on, and include, the Effective Date and (b) the final Calculation Period for the party will end on, but exclude, the Termination Date.>"
cdm.product.common.schedule,func CalculationPeriodRange,
cdm.base.math,func CompareNumbers,
cdm.base.math,func Abs,"<Returns the absolute value of a number. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned.>"
cdm.base.math,func Max,<Returns the greater number of two supplied numbers.>
cdm.base.math,func Min,<Returns the lesser number of two supplied numbers.>
cdm.base.math,func RoundToNearest,
cdm.base.math,func RoundToPrecision,"<Round a rate to the supplied precision, using the supplied rounding direction>"
cdm.base.math,func CompareQuantityByUnitOfAmount,
cdm.base.math,func FilterQuantity,<Filter list of quantities based on unit type.>
cdm.base.math,func FilterQuantityByCurrency,<Filter list of quantities based on unit type.>
cdm.base.math,func FilterQuantityByCurrencyExists,<Filter list of quantities based on unit type.>
cdm.base.math,func FilterQuantityByFinancialUnit,<Filter list of quantities based on unit type.>
cdm.base.math,func AppendToVector,<Append a single value to a vector (list of numbers).>
cdm.base.math,func VectorOperation,"<Generates a result vector by applying the supplied arithmetic operation to each element of the supplied left and right vectors in turn.  i.e. result[n] = left[n] <op> right[n], where <op> is the arithmetic operation defined by ArithmeticOperationEnum.>"
cdm.base.math,func VectorScalarOperation,"<Generates a result vector by applying the supplied arithmetic operation and scalar right value to each element of the supplied left vector in turn. i.e. result[n] = left[n] <op> right, where <op> is the arithmetic operation defined by ArithmeticOperationEnum.>"
cdm.base.math,func VectorGrowthOperation,"<Generates a result vector by starting with the supplied base value (typically 1), and then multiplying it in turn by each growth factor, which is typically a number just above 1. For instance, a growth factor of 1.1 reprsents a 10% increase, and 0.9 a 10% decrease. The results will show the successive results of applying the successive growth factors, with the first value of the list being the supplied baseValue, and final value of the results list being the product of all of the supplied values.  i.e. result[1] = baseValue * factor[1], result[n] = result[n-1] * factor[n]. The resulting list will have the one more element than the supplied list of factors.>"
cdm.base.math,func ArithmeticOperation,
cdm.product.asset.calculation,func FixedAmountCalculation,<Calculates the fixed amount for a calculation period by looking up the notional and the fixed rate and multiplying by the year fraction.>
cdm.product.asset.calculation,func GetFixedRate,<Look up the fixed rate for a calculation period.>
cdm.product.asset.calculation,func FloatingAmountCalculation,"<Calculate a floating amount for a calculation period by determining the raw floating rate, applying any rate treatments, looking up the calculation period notional, then performing the multiplication of the notional, rate, and year fraction.  Floating amount calculations are described in the 2021 ISDA Definitions in Section 6 and 7.>"
cdm.product.asset.calculation,func ApplyFloatingRateSetting,"<Calculate a floating amount for a calculation period by determining the raw floating rate, applying any rate treatments, looking up the calculation period notional, then performing the multiplication of the notional, rate, and year fraction.  Floating amount calculations are described in the 2021 ISDA Definitions in Section 6 and 7.>"
cdm.product.asset.calculation,func DefaultFloatingRate,
cdm.product.asset.calculation,func CalculateFloatingCashFlow,
cdm.product.asset.calculation,func Create_CalculationPeriodBase,<Create a CalculationPeriodBase type from CalculationPeriodData type.>
cdm.product.asset.calculation,func GetNotionalAmount,<Look up the notional amount in effect for a calculation period.>
cdm.product.asset.calculation,func GetQuantityScheduleStepValues,"<Find all schedule step values whose stepDate is before or equal to the supplied periodStartDate.  Returns a list of step values starting from the initial quantity value, to the last step value before the periodStartDate.>"
cdm.product.asset.calculation,func CalculateYearFraction,"<Calculate the year fraction for a single calculation period, by invoking the base year fraction logic>"
cdm.observable.asset.fro,func IndexValueObservation,<Retrieve the values of the supplied index on the specified observation date.>
cdm.observable.asset.fro,func IndexValueObservationMultiple,<Retrieve the values of the supplied index on the specified observation dates.>
cdm.observable.asset.fro,func FloatingRateIndexMetadata,<Retrieve all available metadata for the floating rate index.>
cdm.observable.asset,func FilterPrice,<Filter list of prices based on price type.>
cdm.event.qualification,func Qualify_Allocation,<The qualification of allocation event from the fact that (i) the only primitives are split and contract formation (ii) the number of split executions and the number of contract formations are equal.  Note that SplitPrimitive type has a condition to check that the post-split quantities sum to the pre-split quantity.  Also note that it is expected that an allocation can result in a single contract.>
cdm.event.qualification,func Qualify_CashTransfer,<The qualification of a cash transfer from the fact that the only component is a cashTransfer.>
cdm.event.qualification,func Qualify_CashAndSecurityTransfer,"<The qualification of a security settlement from the fact that (i) it is composed of a cashTransfer component and a securityTransfer component, and (ii) the cash and security move in the same direction.>"
cdm.event.qualification,func Qualify_ClearedTrade,
cdm.event.qualification,func Qualify_OpenOfferClearedTrade,
cdm.event.qualification,func Qualify_Compression,"<The qualification of a compression event from the fact that (i) the quantityChange primitive exists, and (ii) there are multiple contracts (or contract references) specified in the before state.>"
cdm.event.qualification,func Qualify_PortfolioRebalancing,"<The qualification of a portfolio rebalancing event from the fact that (i) the intent is PortfolioRebalancing, and (ii) the execution primitive exists>"
cdm.event.qualification,func Qualify_Exercise,"<The qualification of an exercise event from the fact that (i) the only primitive is the exercise, and (ii) the remaining quantity = 0, and (iv) the closedState of the contract is Terminated.>"
cdm.event.qualification,func Qualify_Increase,"<The qualification of a increase event from the fact that (i) the intent is Increase when specified, (ii) the associated primitives are the quantityChange and the cash transfer, the (iii) the quantity associated with the contract increases.>"
cdm.event.qualification,func Qualify_Novation,"<The qualification of a novation event from the fact that (i) the intent is Novation when specified, (ii) the primitives quantityChange and a contract formation exist, (iii) the remaining quantity = 0, (iv) the closedState of the contract is Novated, (v) the stepped-in contract has a different contract identifier than the novated contract, (vi) the stepped-in contract has the novation event date and the novation event effective date, and (vii) the contract counterparties have changed.>"
cdm.event.qualification,func Qualify_PartialNovation,"<The qualification of a novation event from the fact that (i) the intent is Novation when specified, (ii) the primitives quantityChange and contractFormation exist, (iii) the contract quantity/notional has decreased as part of the quantityChange primitive, while (iv) there is a remaining quantity/notional, (v) the stepped-in contract has a different contract identifier than the original contract, (vi) the stepped-in contract has the novation event date and the novation event effective date, and (vii) the contract counterparties have changed.>"
cdm.event.qualification,func Qualify_PartialTermination,"<The qualification of a partial termination event from the fact that (i) the intent is Partial Termination when specified, (ii) the associated primitives are the quantityChange and the cash transfer, the (iii) the quantity associated with the contract decreases, and (iv) there is an actual remaining quantity.>"
cdm.event.qualification,func Qualify_Renegotiation,"<The qualification of a renegotiation event from the fact that (i) the intent is Renegotiation when specified, and (ii) the associated primitives instructions are the TermsChange, QuantityChange and the cash transfer.>"
cdm.event.qualification,func Qualify_Reset,<The qualification of a reset event from the fact that the only primitive is the reset.>
cdm.event.qualification,func Qualify_SecurityTransfer,<The qualification of a security transfer from the fact that the only component is a securityTransfer.>
cdm.event.qualification,func Qualify_SecuritySettlement,"<The qualification of a security settlement from the fact that (i) it is composed of a cashTransfer component and a securityTransfer component, and (ii) the cash and security move in opposite directions.>"
cdm.event.qualification,func Qualify_Termination,"<The qualification of a termination event from the fact that (i) the intent is Termination when specified, (ii) the only primitive is the quantityChange and there is only one such primitive involved, the (iii) the remaining quantity is null, and (iv) the closedState of the contract is Terminated.>"
cdm.event.qualification,func Qualify_Execution,<The qualification of an execution event from the fact that the only component is an execution.>
cdm.event.qualification,func Qualify_ContractFormation,<Qualifies a business event as a contract formation from the fact that the only component is a single Contract Formation Primitive.>
cdm.event.qualification,func Qualify_StockSplit,<The qualification of StockSplit business event based on (i) an unchanged before/after currency amount (ii) the same adjustment ratio applied to the before/after cash price and number of units.>
cdm.event.qualification,func Qualify_IndexTransition,<The qualification of an index transition event based on (i) adjustment spread applied and (ii) floating rate index changed.>
cdm.event.qualification,func Qualify_FullReturn,"<The qualification of a full return event from the fact that (i) a quantityChange primitive and a transfer primitive exists, (ii) an assetPayout exists, (iii) the remaining quantity = 0, and (iv) the closedState of the contract is Terminated.>"
cdm.event.qualification,func Qualify_Reallocation,"<The qualification of a reallocation event from the fact that (i) a quantity change primitive exists, (ii) a split primitive exists, and (iii) the intent is Reallocation.>"
cdm.event.qualification,func Qualify_CreditEventDetermined,<The qualification of the ocurrence of a credit event determination from the fact that a credit event is present in either the observation or observation history structures.>
cdm.event.qualification,func Qualify_CorporateActionDetermined,<The qualification of the ocurrence of a corporate action form the fact that a corporate action is present in either the observation or the observation history structures.>
cdm.event.qualification,func Qualify_ValuationUpdate,<The qualification of a valuation update from the fact that the only component is a valuation.>
cdm.product.qualification,func Qualify_AssetClass_InterestRate,<Qualifies a product as having the Asset Class classification Interest Rate.>
cdm.product.qualification,func Qualify_AssetClass_Credit,<Qualifies a product as having the Asset Class classification Credit Default.>
cdm.product.qualification,func Qualify_AssetClass_ForeignExchange,<Qualifies a product as having the Asset Class classification Foreign Exchange>
cdm.product.qualification,func Qualify_AssetClass_Equity,
cdm.product.qualification,func Qualify_AssetClass_Commodity,<Qualifies a product as having the Asset Class classification Commodity>
cdm.product.qualification,func Qualify_CreditDefaultSwap_SingleName,"<Qualifies a product as a Credit Default Swap which provides protection relative to defaults of a reference entity that could be a corporate, municipal, sovererign, or special purpose vehicle issuer of publically traded debt.  The determination of the qualification is based on the economic terms and the following criteria"
cdm.product.qualification,func Qualify_CreditDefaultSwap_Index,<Qualifies a product as a Credit Default Swap which provides protection relative to the performance of an index. The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_CreditDefaultSwap_IndexTranche,<Qualifies a product as a Credit Default Swap which provides protection relative to the performance of an index. The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_CreditDefaultSwap_Loan,<Qualifies a product as a Credit Default Swap which provides protection relative to defaults of a reference entity that is a loan. The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_CreditDefaultSwap_Basket,<Qualifies a product as a Credit Default Swap which provides protection relative to defaults of a reference entity that is a loan. The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_CreditDefaultSwaption,<This product qualification is temporary until such time that the ISDA Credit Group specifies a proper taxonomy for credit derivatives that is based upon economic terms.>
cdm.product.qualification,func Qualify_UnderlierProduct_Equity,<Qualifies a product as having the Asset Class classification Equity.>
cdm.product.qualification,func Qualify_BaseProduct_EquitySwap,<Qualifies a product as having the Asset Class classification Equity and Base Product Classification Swap.>
cdm.product.qualification,func Qualify_EquitySwap_PriceReturnBasicPerformance_SingleName,<Qualifies a product as an Equity Swap for which the performance is based on the price change on a single stock.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_TotalReturnBasicPerformance_SingleName,<Qualifies a product as an Equity Swap for which the performance is based on the price changes and dividend returns on a single stock.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_PriceReturnBasicPerformance_Index,<Qualifies a product as an Equity Swap for which the performance is based on the price change on an index.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_TotalReturnBasicPerformance_Index,<Qualifies a product as an Equity Swap for which the performance is based on the price changes and dividend returns on an index.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_PriceReturnBasicPerformance_Basket,<Qualifies a product as an Equity Swap for which the performance is based on the price change on a basket.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_TotalReturnBasicPerformance_Basket,<Qualifies a product as an Equity Swap for which the performance is based on the price changes and dividend returns on a basket.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnVariance_SingleName,<Qualifies a product as an Equity Swap for which the performance is based on the variance changes on a single stock.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnVariance_Index,<Qualifies a product as an Equity Swap for which the performance is based on the variance changes on an index.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnVariance_Basket,<Qualifies a product as an Equity Swap for which the performance is based on the variance changes on a basket.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnDispersion,<Qualifies a product as an Equity Swap for which the performance is based on the variance changes in several legs.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnVolatility_SingleName,<Qualifies a product as an Equity Swap for which the performance is based on the volatility changes on a single stock.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnVolatility_Index,<Qualifies a product as an Equity Swap for which the performance is based on the volatility changes on an index.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnVolatility_Basket,<Qualifies a product as an Equity Swap for which the performance is based on the volatility changes on a basket.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnCorrelation_Basket,<Qualifies a product as an Equity Swap for which the performance is based on changes in the correlation between the constituents of a basket.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnDividend_SingleName,<Qualifies a product as an Equity Swap for which the performance is based on the dividend returns of a single stock.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnDividend_Index,<Qualifies a product as an Equity Swap for which the performance is based on the dividend returns of an index.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquitySwap_ParameterReturnDividend_Basket,<Qualifies a product as an Equity Swap for which the performance is based on the dividend returns of a basket.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_BaseProduct_EquityForward,<Qualifies a product as having the Asset Class classification Equity and Base Product Classification Forward.>
cdm.product.qualification,func Qualify_EquityOption_PriceReturnBasicPerformance_SingleName,<Qualifies a product as a plain vanilla Equity Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_PriceReturnBasicPerformance_Index,<Qualifies a product as an Equity Option with an index as underlier.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_PriceReturnBasicPerformance_Basket,<Qualifies a product as an Equity Option with a basket underlier.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnVariance_SingleName,<Qualifies a product as an Equity Variance Single Name Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnVariance_Index,<Qualifies a product as an Equity Variance Index Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnVariance_Basket,<Qualifies a product as an Equity Variance Basket Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnVolatility_SingleName,<Qualifies a product as an Equity Volatility Single Name Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnVolatility_Index,<Qualifies a product as an Equity Volatility Index Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnVolatility_Basket,<Qualifies a product as an Equity Volatility Basket Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnCorrelation_Basket,<Qualifies a product as an Equity Correlation Basket Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnDividend_SingleName,<Qualifies a product as an Equity Dividend Single Name Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnDividend_Index,<Qualifies a product as an Equity Dividend Index Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_EquityOption_ParameterReturnDividend_Basket,<Qualifies a product as an Equity Dividend Basket Option.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_BaseProduct_IRSwap,<Qualifies a product as having the Base Product classification Interest Rate Swap.>
cdm.product.qualification,func Qualify_BaseProduct_CrossCurrency,<Qualifies a product as having the Base Product classification Cross Currency.>
cdm.product.qualification,func Qualify_BaseProduct_Fra,<Qualifies a product as having the Base Product classification Forward Rate Agreement>
cdm.product.qualification,func Qualify_BaseProduct_Inflation,<Qualifies a product as having the Base Product classification Inflation Swap>
cdm.product.qualification,func Qualify_SubProduct_FixedFloat,<Qualifies a product as having the Sub Product classification Fixed Float>
cdm.product.qualification,func Qualify_SubProduct_FixedFixed,<Qualifies a product as having the Sub Product classification Fixed Fixed>
cdm.product.qualification,func Qualify_SubProduct_Basis,<Qualifies a product as having the Sub Product classification Basis>
cdm.product.qualification,func Qualify_Transaction_ZeroCoupon,<Qualifies a product as having the Transaction classification Zero Coupon>
cdm.product.qualification,func Qualify_Transaction_ZeroCoupon_KnownAmount,<Qualifies a product as having the Transaction classification Zero Coupon with a Known Amount. This category applies to a Zero Coupon Swap in which the fixed leg pays a known amount at maturity.>
cdm.product.qualification,func Qualify_Transaction_YoY,<Qualifies a product as having the Transaction classification Year on Year>
cdm.product.qualification,func Qualify_Transaction_OIS,<Qualifies a product as having the Transaction classification OIS>
cdm.product.qualification,func Qualify_InterestRate_IRSwap_FixedFloat,<Qualifies a product as a Fixed-Float Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_IRSwap_FixedFixed,<Qualifies a product as a Fixed-Fixed Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_IRSwap_Basis,<Qualifies a product as a Basis (Float-Float) Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_IRSwap_FixedFloat_ZeroCoupon,<Qualifies a product as a Fixed-Float Zero Coupon Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_IRSwap_FixedFloat_OIS,<Qualifies a product as a Fixed-Float OIS Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_IRSwap_Basis_OIS,<Qualifies a product as a Basis (Fixed-Float) OIS Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_CrossCurrency_FixedFloat,<Qualifies a product as a Fixed-Float Cross-Currency Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_CrossCurrency_Basis,<Qualifies a product as a Basis (Float-Float) Cross Currency Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_CrossCurrency_FixedFixed,<Qualifies a product as a Fixed-Fixed Cross-Currency Interest Rate Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_InflationSwap_FixedFloat_YearOn_Year,<Qualifies a product as a Fixed-Float Annual Reset Inflation Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_InflationSwap_FixedFloat_ZeroCoupon,<Qualifies a product as a Fixed-Float Inflation Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_InflationSwap_Basis_YearOn_Year,<Qualifies a product as a Basis (Float-Float) Annual Reset Inflation Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_InflationSwap_Basis_ZeroCoupon,<Qualifies a product as a Basis (Float-Float) Inflation Swap based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_Fra,<Qualifies the product as a Floating Rate Agreement based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_InterestRate_CapFloor,"<Qualifies a product as an interest rate cap, interest rate floor, or an interest rate collar based on the economic terms and the following criteria"
cdm.product.qualification,func Qualify_InterestRate_Option_Swaption,"<Qualifies a product as a Swaption that can be exercised into an Interest Rate Swap, which could be any type of interest rate product with two legs based on the economic terms.>"
cdm.product.qualification,func Qualify_InterestRate_Option_DebtOption,<Qualifies a product as a Option that can be exercised into an Debt Product based on the economic terms.>
cdm.product.qualification,func Qualify_InterestRate_Forward_Debt,"<Qualifies a product as Interest Rate Bond Forward based on economic terms, which is defined as a transaction in which one party agrees to pay an agreed price for a specified amount of a bond of an issuer or a basket of bonds of several issuers at a future date and the other party agrees to pay a price for the same amount of the same bond to be set on a specified date in the future.>"
cdm.product.qualification,func Qualify_ForeignExchange_Spot_Forward,"<Qualifies a product as Foreign Exchange based on economic terms, which is defined as an agreement to buy one currency against the delivery of another currency at a rate set on the trade date for settlement on a specified date in the future.  Dependent on conventions specific to local markets the product could be considered either Spot or Forward.>"
cdm.product.qualification,func Qualify_ForeignExchange_Swap,"<Qualifies a product as Foreign Exchange Swap based on economic terms, which is defined as a contract in which one party borrows one currency from, and simultaneously lends another to, the second party. Each party uses the repayment obligation to its counterparty as collateral and the amount of repayment is fixed at the FX forward rate as of the start of the contract.>"
cdm.product.qualification,func Qualify_ForeignExchange_NDF,"<Qualifies a product as Foreign Exchange Non-Deliverable Forward based on economic terms, which is defined as a Forward transaction where the notional amount of one of the currencies (the reference currency) is converted into the other currency (the settlement currency) at a spot foreign exchange rate that is observed on a valuation date prior to the settlement date, and a single net payment in the settlement currency is made on the settlement date. No payment or account transfer takes place in the reference currency.>"
cdm.product.qualification,func Qualify_ForeignExchange_ParameterReturnVariance,<Qualifies a product as Foreign Exchange Swap for which the performance is based on the variance of a foreign exhange underlier.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_ForeignExchange_ParameterReturnVolatility,<Qualifies a product as Foreign Exchange Swap for which the performance is based on the volatility of a foreign exchange underlier.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_ForeignExchange_ParameterReturnCorrelation,<Qualifies a product as Foreign Exchange Swap for which the performance is based on the correlation changes between the constituents of a basket.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_ForeignExchange_VanillaOption,"<Qualifies a product as FX Plain Vanilla Option based on economic terms, which is defined as one where 1) exercise style is American or European style only, and 2) does not contain any feature like Forward Starting Strike or Performance payout.>"
cdm.product.qualification,func Qualify_SecuritiesFinance,<Qualifies a product as generic Securities Finance; eg Securities Lending or Repurchase Agreement.>
cdm.product.qualification,func Qualify_Commodity_Swap_FixedFloat,<Qualifies a product as a Fixed Float Commodity Swap.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_Commodity_Swap_Basis,<Qualifies a product as a Basis Commodity Swap.  The determination of the qualification is based on the economic terms and the following criteria
cdm.product.qualification,func Qualify_Commodity_Option,<Qualifies a product as a Option that can be exercised into an Commodity.>
cdm.product.qualification,func Qualify_Commodity_Swaption,"<Qualifies a product as a Swaption that can be exercised into a Commodity Swap, which could be any type of interest rate product with two legs based on the economic terms.>"
cdm.observable.event,func Create_AssetPayoutTradeStateWithObservations,<Attaches a set of Observations to a Security Finance Transaction.>
cdm.observable.event,func Create_AssetReset,<Defines how to resolve the reset value for an equity payout.>
cdm.observable.event,func ResolveObservationAverage,"<Specifies the interface that should be used by implementors to resolve a single observation when provided many, applying the averaging method, if one is provided.>"
cdm.product.common.settlement,func UpdateAmountForEachQuantity,<Updates all quantities on each price quantity with the new amount.>
cdm.product.common.settlement,func UpdateAmountForEachMatchingQuantity,<Updates any quantity from the list of new quantities if the unit of amount matches.>
cdm.product.common.settlement,func RateOptionObservableCondition,<Implementation for PriceQuantity.RateOptionObservable condition.>
cdm.product.collateral,func Create_EligibleCollateralSpecificationFromInstruction,<Creates an Eligible Collateral Specification through the combination of common and variable characteristics.>
cdm.product.collateral,func MergeEligibleCollateralCriteria,<Java implementation merges criteria1 and criteria2.>
cdm.product.collateral,func CheckEligibilityForProduct,
cdm.product.collateral,func CheckEligibilityByDetails,"<This function when presented with a set of Asset and Issuer details to be potentially posted as collateral, will check against a set of given Eligibility Criteria or Basket (EligibleCollateralSpecification) to determine which collateral meets the eligibility and can be used/posted for delivery.>"
cdm.product.collateral,func CheckAssetCountryOfOrigin,
cdm.product.collateral,func CheckAgencyRating,
cdm.product.collateral,func CheckAssetType,
cdm.product.collateral,func CheckDenominatedCurrency,
cdm.product.collateral,func CheckMaturity,
cdm.product.collateral,func CheckIssuerName,
cdm.product.collateral,func CheckIssuerType,
cdm.base.staticdata.party,func ExtractCounterpartyByRole,"<Extracts from a list of Counterparty data types, the Counterparty that corresponds to the role i.e. Party1 or Party2.>"
cdm.base.staticdata.party,func ExtractAncillaryPartyByRole,"<Extracts from a list of AncillaryParty data types, the AncillaryParty that corresponds to the AncillaryRoleEnum.>"
cdm.base.staticdata.party,func ReplaceParty,"<Removes the old party, and adds the new party.>"
cdm.base.staticdata.party,func FilterPartyRole,<Filters the list of partyRoles based on the provided partyRoleEnum.>
cdm.base.staticdata.party,func FilterRelatedPartyByRole,<Filters the list of RelatedParty based on the provided partyRoleEnum.>
cdm.product.asset,func FixedAmount,<2006 ISDA Definition Article 5 Section 5.1. Calculation of a Fixed Amount
cdm.product.asset,func FloatingAmount,<2006 ISDA Definition Article 6 Section 6.1. Calculation of a Floating Amount
cdm.product.asset,func ResolveRateIndex,<The function to specify that the floating rate index enumeration will be expressed as a number once the rate is observed.>
cdm.product.asset,func ResolvePerformancePeriodStartPrice,"<Resolves the price from the end of the previous period. If first period, then take the initial price.>"
cdm.product.asset,func ResolveEquityInitialPrice,<To be replaced by full resolve price function implementation.>
cdm.product.asset,func DividendCashSettlementAmount,<Based on the following legal text
cdm.product.asset,func ExtractFixedLeg,<Extract interest rate payout containing fix rate specification.>
cdm.event.workflow,func Create_WorkflowStep,"<Function to create a workflow step with a business event and associated details about the message, identifiers, event timestamps, parties and accounts involved in the step. The function should be used when there is already a fully formed business event with the action set to signify that the step is new, or a correction/cancellation of a previous step. The action is constrained so that when a previous workflow step is specified, the valid actions are as follows; New -> New, New -> Correct, New -> Cancel, Correct -> Correct and Correct -> Cancel. When a previous workflow is not specified, the action must be New.>"
cdm.event.workflow,func Create_AcceptedWorkflowStep,"<Represents the acceptance of a proposed instruction that results in a workflow step containing a business event, message details, identifiers, event timestamps, parties and accounts. The previous workflow step input must exist to provide workflow lineage. The instruction from the previous workflow step should be used with a [creation BusinessEvent] function to create the input business event passed into this function e.g. PartyChangeInstruction from the previous step is used with Create_PartyChange to produce the business event which should used as an input to this step.>"
cdm.event.workflow,func Create_AcceptedWorkflowStepFromInstruction,"<Represents the acceptance of a proposed instruction that results in a workflow step containing a business event, message details, identifiers, event timestamps, parties and accounts. The previous workflow step input must exist to provide workflow lineage. The instruction from the previous workflow step should be used with a [creation BusinessEvent] function to create the input business event passed into this function e.g. PartyChangeInstruction from the previous step is used with Create_PartyChange to produce the business event which should used as an input to this step.>"
cdm.event.workflow,func Create_ProposedWorkflowStep,"<Represents the proposal to create a business event that results in a workflow step containing an instruction, message details, identifiers, event timestamps, parties and accounts. The optional previous workflow step input provides workflow lineage to where there has been a correction or cancellation to the proposed step. The action is constrained so that when a previous workflow step is specified, the valid actions are as follows; New -> Correct and Correct -> Cancel. When a previous workflow is not specified, the action must be New.>"
cdm.event.workflow,func Create_RejectedWorkflowStep,"<Represents the rejection of a proposed instruction that results in a workflow step containing the rejection flag, message details, identifiers, event timestamps, parties and accounts involved in the step. The previous workflow step input must exist to provide workflow lineage. This function will be further developed to provide the reasons for rejection.>"
cdm.event.workflow,func Create_Workflow,<Function to create a Workflow from a list of WorkflowStep.>
cdm.product.template,func FilterTradeLot,<Filter list of TradeLot based on TradeLot->lotIdentifier.>
cdm.product.template,func AddTradeLot,<Add a TradeLot to an existing list of TradeLots.>
cdm.product.template,func MergeTradeLot,<Replace TradeLot in with matching TradeLot->lotIdentifier.>
cdm.product.template,func CompareTradeLot,"<Compare the Quantity in TradeLot 1 to the Quantity (with the same unit of amount) in TradeLot 2, based on the CompareOp enum.>"
cdm.product.template,func CompareTradeLotToAmount,"<Compare the Quantity amount in TradeLot to the given amount (regardless of unit of amount), based on the CompareOp enum.>"
cdm.product.template,func PriceQuantityTriangulation,<Defines all the scenarios which triangulation can be helpful validation between Prices and Quantities.>
cdm.product.template,func FpmlIrd8,"<FpML validation rule ird-8 - If the same party is specified as the payer and receiver, then different accounts must be specified.>"
cdm.product.common,func InterestRatePayoutCurrency,
cdm.base.datetime.daycount,func YearFraction,<The fraction of a year represented by a date range>
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> _1_1),
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> ACT_ACT_ISDA),
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> ACT_ACT_ICMA),DayCountFractionEnum -> ACT_ACT_ICMA)
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> ACT_365_FIXED),DayCountFractionEnum -> ACT_365_FIXED)
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> ACT_360),DayCountFractionEnum -> ACT_360)
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> _30_360),DayCountFractionEnum -> _30_360)
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> _30E_360),DayCountFractionEnum -> _30E_360)
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> _30E_360_ISDA),DayCountFractionEnum -> _30E_360_ISDA)
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> ACT_364),DayCountFractionEnum -> ACT_364)
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> ACT_365L),DayCountFractionEnum -> ACT_365L)
cdm.base.datetime.daycount,func YearFraction(dayCountFractionEnum DayCountFractionEnum -> CAL_252),DayCountFractionEnum -> CAL_252)
cdm.base.datetime.daycount,func YearFractionForOneDay,"<Return the year fraction represented by a single day, i.e 1 / dayCountBasis, where daycountBasis represents the denominator of the day count fraction. This perhaps should take into account leap years, though the ISDA compounding formulas do not cover ACT basis at the moment.>"
cdm.base.datetime.daycount,func DayCountBasis,<Return the day count basis (the denominator of the day count fraction) for the day count fraction.>
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> ACT_360):,DayCountFractionEnum -> ACT_360):
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> _30_360):,DayCountFractionEnum -> _30_360):
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> _30E_360):,DayCountFractionEnum -> _30E_360):
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> ACT_365L):,DayCountFractionEnum -> ACT_365L):
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> ACT_365_FIXED):,DayCountFractionEnum -> ACT_365_FIXED):
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> ACT_ACT_AFB):,DayCountFractionEnum -> ACT_ACT_AFB):
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> ACT_ACT_ISDA):,DayCountFractionEnum -> ACT_ACT_ISDA):
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> ACT_ACT_ICMA):,DayCountFractionEnum -> ACT_ACT_ICMA):
cdm.base.datetime.daycount,func DayCountBasis(dcf DayCountFractionEnum -> CAL_252):,DayCountFractionEnum -> CAL_252):
cdm.event.common,func QuantityIncreased,
cdm.event.common,func QuantityDecreased,
cdm.event.common,func QuantityDecreasedToZero,
cdm.event.common,func CompareTradeStatesToAmount,"<For each TradeState, compare the Quantity amounts in each TradeState to the given amount (regardless of unit of amount), based on the CompareOp enum.>"
cdm.event.common,func TransfersForDate,
cdm.event.common,func FilterCashTransfers,
cdm.event.common,func FilterSecurityTransfers,
cdm.event.common,func ResolveInterestRateObservationIdentifiers,"<Defines which attributes on the InterestRatePayout should be used to locate and resolve the underlier's price, for example for the reset process.>"
cdm.event.common,func ResolveInterestRateReset,<Defines how to resolve the reset value for an InterestRatePayout.>
cdm.event.common,func InterestCashSettlementAmount,<Defines the performance calculations relevent for a fixed or floating rate payout.>
cdm.event.common,func ResolveReset,"<Defines the interface for adopters to resolve a reset, given a trade state and a date.>"
cdm.event.common,func ResolvePerformanceObservationIdentifiers,"<Defines which attributes on the PerformancePayout should be used to locate and resolve the underlier's price, for example for the reset process.>"
cdm.event.common,func AdjustedValuationDates,
cdm.event.common,func ResolvePerformanceValuationTime,<Defines how to resolve the observation time from those specified in the Performance Valuation type.>
cdm.event.common,func ResolvePerformanceReset,<Defines how to resolve the reset value for a performance payout.>
cdm.event.common,func EquityCashSettlementAmount,"<Represents Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 72. 'Equity Cash Settlement Amount' means, in respect of an Equity Cash Settlement Date, an amount in the Settlement Currency determined by the Calculation Agent as of the Equity Valuation Date to which the Equity Cash Settlement Amount relates, pursuant to the following formula"
cdm.event.common,func EquityPerformance,"<Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 75. 'Equity Performance' means, in respect of an Equity Cash Settlement Date, an amount in the Settlement Currency determined by the Calculation Agent as of the Equity Valuation Date to which the Equity Cash Settlement Amount relates, pursuant to the following formula"
cdm.event.common,func RateOfReturn,"<Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 139. 'Rate Of Return' means, in respect of any Equity Valuation Date, the amount determined pursuant to the following formula"
cdm.event.common,func EquityNotionalAmount,"<Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 74. 'Equity Notional Amount' means the Number Of Securities times the Initial Price, adjusted, if applicable, as provided in Part 1 Section 2.2, 'Equity Notional Reset'. If 'With Reset' is the Equity Notional Reset Election, then in respect of each Equity Cash Settlement Date"
cdm.event.common,func Create_StockSplit,<Function specification to create the fully-formed business event which represents the impact of a stock split (or a reverse stock split) on an Equity Derivatives contract on a certain date.>
cdm.event.common,func Create_Execution,<Specifies the function to compose an execution based on a minimum required set of inputs
cdm.event.common,func Create_ContractFormationInstruction,
cdm.event.common,func Create_ContractFormation,"<Function specification that represents an executed trade for a contractual product that has been affirmed (or confirmed) by the two parties. The formed contract can reference a legal agreement for instance a master agreement, by using the optional legalAgreement input.>"
cdm.event.common,func Create_Exercise,"<Defines the process of putting into effect the rights specified in an options contract, such as to buy or sell a security.  Once exercised the option contract is terminated.>"
cdm.event.common,func Create_Reset,<Defines how a Reset should be constructed.>
cdm.event.common,func CalculateTransfer,"<Function specification to calculate a transfer, e.g. following a reset on a contract>"
cdm.event.common,func Create_Transfer,"<Defines how a transfer should be constructed, when representing the exchange of cash between parties.>"
cdm.event.common,func Create_CashTransfer,"<Defines how Transfer that represents an exchange of cash, should be constructed.>"
cdm.event.common,func Create_SecurityTransfer,"<Defines the creation of a Transfer, given a Trade State and date.>"
cdm.event.common,func Create_AssetTransfer,"<Defines how Transfer that represents an exchange of asset based on an asset payout, should be constructed.>"
cdm.event.common,func ResolveTransfer,<Defines how to calculate the amount due to be transferred after a Reset Event.>
cdm.event.common,func ResolveCashSettlementDate,<A product agnostic function that resolves the settlement date of the payout for the period in question>
cdm.event.common,func SecurityFinanceCashSettlementAmount,
cdm.event.common,func Create_Split,"<Defines the logic for splitting a trade into separate copies. The split instruction contains a breakdown into N set of primitive instructions. Each set contains the primitive instructions to be applied to each post-split trade, eventually producing N trades. The split function underpins a number of business events such as clearing or allocation.>"
cdm.event.common,func Create_PartyChange,"<Defines the logic for changing one of the counterparties on a trade. A new trade identifier must be specified as a change of party results in a new trade. An ancillary party can also be specified, for instance to refer to the original executing party on the new trade.>"
cdm.event.common,func EmptyTransferHistory,
cdm.event.common,func Create_QuantityChange,"<A specification of the inputs, outputs and constraints when calculating the after state of a Quantity Change Primitive Event>"
cdm.event.common,func Create_TermsChange,"<A specification of the inputs, outputs and constraints when calculating the after tradeState based Terms Change Primitive Instruction.>"
cdm.event.common,func FilterOpenTradeStates,<Filter to only 'open' TradeState - where both the closedState and positionState are not set.>
cdm.event.common,func FilterClosedTradeStates,<Filter to only 'closed' TradeState - where either the closedState or positionState are set.>
cdm.event.common,func NewEquitySwapProduct,"<Function specification to create an Equity Swap according to the 2018 ISDA CDM Equity Confirmation Template, based on a minimum set of inputs which can (optionally) include a Master Confirmation Agreement. The inputs represent the minimum set of inputs required to create an Equity Swap, either based on an existing Master Confirmation Agreement or as a stand-alone Equity Swap>"
cdm.event.common,func NewSingleNameEquityPerformancePayout,<Function specification to create the equity payout part of an Equity Swap according to the 2018 ISDA CDM Equity Confirmation template.>
cdm.event.common,func NewFloatingPayout,<Function specification to create the interest rate (floating) payout part of an Equity Swap according to the 2018 ISDA CDM Equity Confirmation template.>
cdm.event.common,func Create_IndexTransitionTermsChange,<Function specification to create a terms change that contains changes to the floating rate indexes and adds an adjustment spread to any existing spread.>
cdm.event.common,func Create_Observation,<Function specification to create an observation that incorporates an observation event into the observation history of a given trade state.>
cdm.event.common,func Create_Valuation,<Function specification to incorporate a new assessment of the valuation in the valuation history of a given trade state.>
cdm.event.common,func UpdateSpreadAdjustmentAndRateOptions,"<For each of the trade state's price quantity, find a matching price quantity instruction, and call the update function.>"
cdm.event.common,func UpdateIndexTransitionPriceAndRateOption,
cdm.event.common,func FindMatchingIndexTransitionInstruction,
cdm.event.common,func Create_SecurityLendingInvoice,<Defines the process of calculating and creating a Security Lending Invoice.>
cdm.event.common,func Create_BillingRecords,<Creates for each billing instruction an individual billing record to be included in a Security Lending Billing Invoice>
cdm.event.common,func Create_BillingRecord,<Creates an individual billing record to be included in a Security Lending Billing Invoice>
cdm.event.common,func ResolveSecurityFinanceBillingAmount,<Calculates the billing amount for a Security Finance transaction.>
cdm.event.common,func ToMoney,
cdm.event.common,func Create_BillingSummary,<Creates a billing summary to be included in a Security Lending Billing Invoice.>
cdm.event.common,func Create_Return,<Defines the process of partially or fully returning a Security Lending Transaction.>
cdm.event.common,func Qualify_Repurchase,"<The qualification of a repurchase event from the fact that (i) a quantityChange instruction exists, (ii) an assetPayout exists, (iii) the remaining quantity = 0, (iv) the closedState of the contract is Terminated, and (v) the intent of the event is 'Repurchase'.>"
cdm.event.common,func ResolveRepurchaseTransferInstruction,<Resolves an instruction for settlement of a Repurchase Event>
cdm.event.common,func Create_RollPrimitiveInstruction,"<Creates the primitive instructions for a trade roll. A trade roll consists in closing an existing trade and entering into a new one which has the same characteristics as the old one, except with an extended termination date and (possibly) a different price.>"
cdm.event.common,func Create_EffectiveOrTerminationDateTermChangeInstruction,"<Creates the relevant terms change primitive instruction object for rolling a contractual product, which consists in the same terms as the original contractual product but with different effective and termination dates.>"
cdm.event.common,func Create_RollTermChangeInstruction,"<Creates the relevant terms change primitive instruction object for rolling a contractual product, which consists in the same terms as the original contractual product but with different effective and termination dates.>"
cdm.event.common,func Qualify_Roll,<Qualification of a roll event based on
cdm.event.common,func Create_OnDemandRateChangePrimitiveInstruction,"<Creates a full primitive instruction for an on-demand rate change event. A rate change consists in closing the original trade and opening a new one with the same details as the original one, but with a new rate (price) and effective date. The business event logic checks that there is only 1 rate price in the original trade to be updated.>"
cdm.event.common,func Create_OnDemandRateChangePriceChangeInstruction,"<Creates a price change instruction for an on-demand rate change, based on a new rate provided as a single number by matching it to a single rate price.>"
cdm.event.common,func Create_OnDemandRateChangeTermsChangeInstruction,"<Creates a terms change instruction for an on-demand rate change, based on a new rate provided as a single number. This instruction only updates the effective date but keeps other details of the trade unchanged.>"
cdm.event.common,func Qualify_OnDemandRateChange,<The qualification of on an-demand rate change event from the fact that the only primitive is the reset.>
cdm.event.common,func Create_CancellationPrimitiveInstruction,<Creates a primitive instruction for early cancellation.>
cdm.event.common,func Create_CancellationTermChangeInstruction,<Create a terms change instruction for a cancellation that consists in bringing the termination date forward.>
cdm.event.common,func Qualify_Cancellation,<Qualification of an cancellation event.>
cdm.event.common,func Create_PairOffInstruction,<Creates a set of instructions to pair-off a set of trades based on a pair reference. A package component is created based on that pair reference and the list of identifiers for the underlying trades. That package component is then added onto the execution details of every underlying trade. The existing trades are not terminated.>
cdm.event.common,func Qualify_PairOff,"<Qualifies an event as a pair-off when all the details of the existing trades are maintained, except for their execution details which are updated to include a package component. This package component must be unique across all trades.>"
cdm.event.common,func Create_ShapingInstruction,<Creates a set of instructions to shape a trade based on shaped quantities and a package ID. The original trade is closed and split into (smaller) shaped trades based on a set of trade lots containing the shaped quantities and an identifier for each shaped trade. A package component is created based on the package ID and the list of identifiers for the shaped trades. That package component is then added onto the execution details of every shaped trade.>
cdm.event.common,func Qualify_Shaping,"<The qualification of a shaping event from the fact that (i) the only primitive is a split where the original trade is closed, (ii) the parties before and after the split remain the same (by contrast with an allocation, for instance) and (iii) the split trades contain a package component in their execution details. This package ties together the resulting shapes trades' identifiers and must be the same across all shaped trades. Note that SplitPrimitive type has a condition to check that the post-split quantities sum to the pre-split quantity.>"
cdm.event.common,func Create_PartialDeliveryPrimitiveInstruction,<Creates the primitive instruction for partial delivery of a repo transaction at settlement.>
cdm.event.common,func Qualify_PartialDelivery,<Qualification of a partial delivery which constitutes a change in quantity and open with the remaining quantity and termination date.>
cdm.event.common,func Create_RepricePrimitiveInstruction,<Creates the primitive instructions for a repricing that alters the cash amount of the trade. Transaction value and variation margin are processed separately as are transfers of cash and securities.>
cdm.event.common,func Create_AdjustmentPrimitiveInstruction,<Creates the primitive instructions for a repricing that alters the collateral quantity and value of the trade. Transaction value and variation margin are processed separately as are transfers of cash and securities.>
cdm.event.common,func Qualify_Reprice,<This qualification function is used to qualify repricing of a contractual product with an interest rate payout and assetPayout.>
cdm.event.common,func Qualify_Adjustment,<This qualification function is used to qualify adjustment of the collateral amount when a transaction is repriced.>
cdm.event.common,func Create_SubstitutionPrimitiveInstruction,<Creates the primitive instructions for a substitution of collateral by replacing the assetpayout of the trade.>
cdm.event.common,func Create_SubstitutionInstruction,<Creates the terms change instruction that updates the payout with the new substitution payout.>
cdm.event.common,func Qualify_Substitution,<Qualification of a collateral substitution event.>
cdm.event.common,func Create_PackageExecutionDetails,<Add a package component to an execution details object. This package component is constructed using an identifier for the package and the list of identifiers for its components.>
cdm.event.common,func NewTradeInstructionOnlyExists,
cdm.event.common,func TradeNoExecutionDetails,
cdm.event.common,func EmptyExecutionDetails,
cdm.event.common,func Create_OnDemandInterestPaymentPrimitiveInstruction,<An instruction to make a interium interest payment by adding a payout leg to the deal.>
cdm.event.common,func Qualify_OnDemandPayment,<Qualification of a on-demand payment.>
cdm.event.common,func Create_CashflowTermsChangeInstruction,
cdm.event.common,func Create_Cashflow,
cdm.event.common,func Create_TerminationInstruction,"<Creates the relevant primitive instruction for a termination, which consists in a quantity change to bring the quantity to zero.>"
cdm.event.common,func Create_BusinessEvent,<Creates a business event from instructions containing primitive instructions and optionally a trade state.>
cdm.event.common,func Create_TradeState,<Creates a single trade state by applying primitive instructions to an existing trade state (optional in case an execution instruction is included).
cdm.event.common,func ExtractBeforeEconomicTerms,
cdm.event.common,func ExtractOpenEconomicTerms,
cdm.event.common,func ExtractBeforeTradableProduct,
cdm.event.common,func ExtractAfterTradableProduct,
cdm.event.common,func ExtractTradePurchasePrice,
cdm.event.common,func ExtractTradeCollateralQuantity,
cdm.event.common,func ExtractTradeCollateralPrice,